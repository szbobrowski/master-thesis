// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LifeguardServiceClient is the client API for LifeguardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LifeguardServiceClient interface {
	// Creates a new lifeguard.
	CreateLifeguard(ctx context.Context, in *CreateLifeguardRequest, opts ...grpc.CallOption) (*CreateLifeguardResponse, error)
	// Retrieves a lifeguard by ID.
	GetLifeguard(ctx context.Context, in *GetLifeguardRequest, opts ...grpc.CallOption) (*GetLifeguardResponse, error)
	// Updates an existing lifeguard.
	UpdateLifeguard(ctx context.Context, in *UpdateLifeguardRequest, opts ...grpc.CallOption) (*UpdateLifeguardResponse, error)
	// Deletes a lifeguard by ID.
	DeleteLifeguard(ctx context.Context, in *DeleteLifeguardRequest, opts ...grpc.CallOption) (*DeleteLifeguardResponse, error)
}

type lifeguardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLifeguardServiceClient(cc grpc.ClientConnInterface) LifeguardServiceClient {
	return &lifeguardServiceClient{cc}
}

func (c *lifeguardServiceClient) CreateLifeguard(ctx context.Context, in *CreateLifeguardRequest, opts ...grpc.CallOption) (*CreateLifeguardResponse, error) {
	out := new(CreateLifeguardResponse)
	err := c.cc.Invoke(ctx, "/main.LifeguardService/CreateLifeguard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lifeguardServiceClient) GetLifeguard(ctx context.Context, in *GetLifeguardRequest, opts ...grpc.CallOption) (*GetLifeguardResponse, error) {
	out := new(GetLifeguardResponse)
	err := c.cc.Invoke(ctx, "/main.LifeguardService/GetLifeguard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lifeguardServiceClient) UpdateLifeguard(ctx context.Context, in *UpdateLifeguardRequest, opts ...grpc.CallOption) (*UpdateLifeguardResponse, error) {
	out := new(UpdateLifeguardResponse)
	err := c.cc.Invoke(ctx, "/main.LifeguardService/UpdateLifeguard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lifeguardServiceClient) DeleteLifeguard(ctx context.Context, in *DeleteLifeguardRequest, opts ...grpc.CallOption) (*DeleteLifeguardResponse, error) {
	out := new(DeleteLifeguardResponse)
	err := c.cc.Invoke(ctx, "/main.LifeguardService/DeleteLifeguard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LifeguardServiceServer is the server API for LifeguardService service.
// All implementations must embed UnimplementedLifeguardServiceServer
// for forward compatibility
type LifeguardServiceServer interface {
	// Creates a new lifeguard.
	CreateLifeguard(context.Context, *CreateLifeguardRequest) (*CreateLifeguardResponse, error)
	// Retrieves a lifeguard by ID.
	GetLifeguard(context.Context, *GetLifeguardRequest) (*GetLifeguardResponse, error)
	// Updates an existing lifeguard.
	UpdateLifeguard(context.Context, *UpdateLifeguardRequest) (*UpdateLifeguardResponse, error)
	// Deletes a lifeguard by ID.
	DeleteLifeguard(context.Context, *DeleteLifeguardRequest) (*DeleteLifeguardResponse, error)
	mustEmbedUnimplementedLifeguardServiceServer()
}

// UnimplementedLifeguardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLifeguardServiceServer struct {
}

func (UnimplementedLifeguardServiceServer) CreateLifeguard(context.Context, *CreateLifeguardRequest) (*CreateLifeguardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLifeguard not implemented")
}
func (UnimplementedLifeguardServiceServer) GetLifeguard(context.Context, *GetLifeguardRequest) (*GetLifeguardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLifeguard not implemented")
}
func (UnimplementedLifeguardServiceServer) UpdateLifeguard(context.Context, *UpdateLifeguardRequest) (*UpdateLifeguardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLifeguard not implemented")
}
func (UnimplementedLifeguardServiceServer) DeleteLifeguard(context.Context, *DeleteLifeguardRequest) (*DeleteLifeguardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLifeguard not implemented")
}
func (UnimplementedLifeguardServiceServer) mustEmbedUnimplementedLifeguardServiceServer() {}

// UnsafeLifeguardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LifeguardServiceServer will
// result in compilation errors.
type UnsafeLifeguardServiceServer interface {
	mustEmbedUnimplementedLifeguardServiceServer()
}

func RegisterLifeguardServiceServer(s grpc.ServiceRegistrar, srv LifeguardServiceServer) {
	s.RegisterService(&LifeguardService_ServiceDesc, srv)
}

func _LifeguardService_CreateLifeguard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLifeguardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifeguardServiceServer).CreateLifeguard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.LifeguardService/CreateLifeguard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifeguardServiceServer).CreateLifeguard(ctx, req.(*CreateLifeguardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LifeguardService_GetLifeguard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLifeguardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifeguardServiceServer).GetLifeguard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.LifeguardService/GetLifeguard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifeguardServiceServer).GetLifeguard(ctx, req.(*GetLifeguardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LifeguardService_UpdateLifeguard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLifeguardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifeguardServiceServer).UpdateLifeguard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.LifeguardService/UpdateLifeguard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifeguardServiceServer).UpdateLifeguard(ctx, req.(*UpdateLifeguardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LifeguardService_DeleteLifeguard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLifeguardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LifeguardServiceServer).DeleteLifeguard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.LifeguardService/DeleteLifeguard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LifeguardServiceServer).DeleteLifeguard(ctx, req.(*DeleteLifeguardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LifeguardService_ServiceDesc is the grpc.ServiceDesc for LifeguardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LifeguardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.LifeguardService",
	HandlerType: (*LifeguardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLifeguard",
			Handler:    _LifeguardService_CreateLifeguard_Handler,
		},
		{
			MethodName: "GetLifeguard",
			Handler:    _LifeguardService_GetLifeguard_Handler,
		},
		{
			MethodName: "UpdateLifeguard",
			Handler:    _LifeguardService_UpdateLifeguard_Handler,
		},
		{
			MethodName: "DeleteLifeguard",
			Handler:    _LifeguardService_DeleteLifeguard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lifeguard.proto",
}
