// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package main

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IncidentServiceClient is the client API for IncidentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IncidentServiceClient interface {
	CreateIncident(ctx context.Context, in *CreateIncidentRequest, opts ...grpc.CallOption) (*IncidentResponse, error)
	GetIncident(ctx context.Context, in *GetIncidentRequest, opts ...grpc.CallOption) (*IncidentResponse, error)
	UpdateIncident(ctx context.Context, in *UpdateIncidentRequest, opts ...grpc.CallOption) (*IncidentResponse, error)
	DeleteIncident(ctx context.Context, in *DeleteIncidentRequest, opts ...grpc.CallOption) (*DeleteIncidentResponse, error)
}

type incidentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIncidentServiceClient(cc grpc.ClientConnInterface) IncidentServiceClient {
	return &incidentServiceClient{cc}
}

func (c *incidentServiceClient) CreateIncident(ctx context.Context, in *CreateIncidentRequest, opts ...grpc.CallOption) (*IncidentResponse, error) {
	out := new(IncidentResponse)
	err := c.cc.Invoke(ctx, "/main.IncidentService/CreateIncident", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incidentServiceClient) GetIncident(ctx context.Context, in *GetIncidentRequest, opts ...grpc.CallOption) (*IncidentResponse, error) {
	out := new(IncidentResponse)
	err := c.cc.Invoke(ctx, "/main.IncidentService/GetIncident", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incidentServiceClient) UpdateIncident(ctx context.Context, in *UpdateIncidentRequest, opts ...grpc.CallOption) (*IncidentResponse, error) {
	out := new(IncidentResponse)
	err := c.cc.Invoke(ctx, "/main.IncidentService/UpdateIncident", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incidentServiceClient) DeleteIncident(ctx context.Context, in *DeleteIncidentRequest, opts ...grpc.CallOption) (*DeleteIncidentResponse, error) {
	out := new(DeleteIncidentResponse)
	err := c.cc.Invoke(ctx, "/main.IncidentService/DeleteIncident", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IncidentServiceServer is the server API for IncidentService service.
// All implementations must embed UnimplementedIncidentServiceServer
// for forward compatibility
type IncidentServiceServer interface {
	CreateIncident(context.Context, *CreateIncidentRequest) (*IncidentResponse, error)
	GetIncident(context.Context, *GetIncidentRequest) (*IncidentResponse, error)
	UpdateIncident(context.Context, *UpdateIncidentRequest) (*IncidentResponse, error)
	DeleteIncident(context.Context, *DeleteIncidentRequest) (*DeleteIncidentResponse, error)
	mustEmbedUnimplementedIncidentServiceServer()
}

// UnimplementedIncidentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIncidentServiceServer struct {
}

func (UnimplementedIncidentServiceServer) CreateIncident(context.Context, *CreateIncidentRequest) (*IncidentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIncident not implemented")
}
func (UnimplementedIncidentServiceServer) GetIncident(context.Context, *GetIncidentRequest) (*IncidentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIncident not implemented")
}
func (UnimplementedIncidentServiceServer) UpdateIncident(context.Context, *UpdateIncidentRequest) (*IncidentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIncident not implemented")
}
func (UnimplementedIncidentServiceServer) DeleteIncident(context.Context, *DeleteIncidentRequest) (*DeleteIncidentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIncident not implemented")
}
func (UnimplementedIncidentServiceServer) mustEmbedUnimplementedIncidentServiceServer() {}

// UnsafeIncidentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IncidentServiceServer will
// result in compilation errors.
type UnsafeIncidentServiceServer interface {
	mustEmbedUnimplementedIncidentServiceServer()
}

func RegisterIncidentServiceServer(s grpc.ServiceRegistrar, srv IncidentServiceServer) {
	s.RegisterService(&IncidentService_ServiceDesc, srv)
}

func _IncidentService_CreateIncident_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIncidentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncidentServiceServer).CreateIncident(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.IncidentService/CreateIncident",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncidentServiceServer).CreateIncident(ctx, req.(*CreateIncidentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IncidentService_GetIncident_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIncidentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncidentServiceServer).GetIncident(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.IncidentService/GetIncident",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncidentServiceServer).GetIncident(ctx, req.(*GetIncidentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IncidentService_UpdateIncident_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIncidentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncidentServiceServer).UpdateIncident(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.IncidentService/UpdateIncident",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncidentServiceServer).UpdateIncident(ctx, req.(*UpdateIncidentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IncidentService_DeleteIncident_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIncidentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncidentServiceServer).DeleteIncident(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.IncidentService/DeleteIncident",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncidentServiceServer).DeleteIncident(ctx, req.(*DeleteIncidentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IncidentService_ServiceDesc is the grpc.ServiceDesc for IncidentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IncidentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.IncidentService",
	HandlerType: (*IncidentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIncident",
			Handler:    _IncidentService_CreateIncident_Handler,
		},
		{
			MethodName: "GetIncident",
			Handler:    _IncidentService_GetIncident_Handler,
		},
		{
			MethodName: "UpdateIncident",
			Handler:    _IncidentService_UpdateIncident_Handler,
		},
		{
			MethodName: "DeleteIncident",
			Handler:    _IncidentService_DeleteIncident_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "incident.proto",
}
